---
import Card from "./Card.astro";

interface Item {
  imgSrc: string;
  headingText: string;
}

const { items = [] }: { items?: Item[] } = Astro.props;
---

<div
  class="carousel-container relative flex justify-center items-center w-3/4 mx-auto"
>
  <button
    id="prev-btn"
    class="carousel-prev absolute z-10 left-0 hover:scale-110 hover:cursor-pointer transition-all translate-x-[-50%]
           flex justify-center items-center w-[70px] h-[70px]
           bg-[#145EFF] rounded-full border border-opacity-50
           border-[#113583]"
    style="display: flex;
width: 70px;
height: 70px;
padding: 17px;
justify-content: center;
align-items: center;
flex-shrink: 0;
border-radius: 100px;
border-top: 1px solid rgba(17, 53, 131, 0.50);
border-right: 1px solid rgba(17, 53, 131, 0.50);
border-left: 1px solid rgba(17, 53, 131, 0.50);
background: var(--Brand-Color, #145EFF);
box-shadow: 0px 6px 8px 0px #00091F;"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="36"
      height="36"
      viewBox="0 0 36 36"
      fill="none"
    >
      <path
        d="M22.5 28.125L12.375 18L22.5 7.875"
        stroke="#F2F6FF"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <div id="carousel" class="carousel-wrapper flex overflow-hidden">
    <div
      class="carousel-inner flex transition-transform duration-300"
      style="display: inline-flex;
align-items: flex-start;
gap: 17.5px;"
      id="carousel-inner"
    >
      {
        items.map((item) => (
          <div class="carousel-item flex-shrink-0">
            <Card imgSrc={item.imgSrc} headingText={item.headingText} />
          </div>
        ))
      }
    </div>
  </div>

  <button
    id="next-btn"
    class="carousel-next absolute z-10 right-0 hover:scale-110 hover:cursor-pointer transition-all -translate-x-[-50%]
           flex justify-center items-center w-[70px] h-[70px]
           bg-[#145EFF] rounded-full border border-opacity-50
           border-[#113583]"
    style="display: flex;
width: 70px;
height: 70px;
padding: 17px;
justify-content: center;
align-items: center;
flex-shrink: 0;
border-radius: 100px;
border-top: 1px solid rgba(17, 53, 131, 0.50);
border-right: 1px solid rgba(17, 53, 131, 0.50);
border-left: 1px solid rgba(17, 53, 131, 0.50);
background: var(--Brand-Color, #145EFF);
box-shadow: 0px 6px 8px 0px rgba(0, 9, 31, 0.15);"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="36"
      height="36"
      viewBox="0 0 36 36"
      fill="none"
    >
      <path
        d="M13.5 7.875L23.625 18L13.5 28.125"
        stroke="#F2F6FF"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carouselInner = document.getElementById("carousel-inner");
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");

    // Clonamos los elementos originales
    const originalItems = document.querySelectorAll(".carousel-item");

    // Añadimos el último elemento al principio y el primero al final
    const lastClone = originalItems[originalItems.length - 1].cloneNode(true);
    const firstClone = originalItems[0].cloneNode(true);

    // Insertamos los clones
    carouselInner.insertBefore(lastClone, carouselInner.firstChild);
    carouselInner.appendChild(firstClone);

    const carouselItems = document.querySelectorAll(".carousel-item");

    let currentIndex = 1; // Empezamos en 1 porque ahora el índice 0 es el clon del último
    const totalItems = carouselItems.length;
    const itemsPerView = 5;

    function updateCarousel(withTransition = true) {
      const itemWidth = carouselItems[0].offsetWidth + 8; // Reducido el gap a 8px
      if (!withTransition) {
        carouselInner.style.transition = "none";
      }
      carouselInner.style.transform = `translateX(-${currentIndex * itemWidth}px)`;
      if (!withTransition) {
        carouselInner.offsetHeight; // Force reflow
        carouselInner.style.transition = "transform 300ms";
      }
    }

    function moveNext() {
      currentIndex++;
      updateCarousel();

      if (currentIndex >= totalItems - itemsPerView) {
        setTimeout(() => {
          currentIndex = 1;
          updateCarousel(false);
        }, 300); // Esperamos a que termine la transición
      }
    }

    function movePrev() {
      currentIndex--;
      updateCarousel();

      if (currentIndex < 1) {
        setTimeout(() => {
          currentIndex = totalItems - itemsPerView - 1;
          updateCarousel(false);
        }, 300); // Esperamos a que termine la transición
      }
    }

    nextBtn.addEventListener("click", moveNext);
    prevBtn.addEventListener("click", movePrev);

    // Configuración inicial
    carouselInner.style.transition = "transform 300ms";
    updateCarousel(false); // Posicionamos en el primer elemento real (no el clon)
  });
</script>
