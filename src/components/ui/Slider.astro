---
import Card from "./Card.astro";

interface Item {
  imgSrc: string;
  nombre: string;
}

const { items = [] }: { items?: Item[] } = Astro.props;
---

<div class="carousel-container relative w-3/4 mx-auto">
  <button
    id="prev-btn"
    class="carousel-prev absolute z-10 left-0 top-1/2 -translate-y-1/2 hover:scale-110 hover:cursor-pointer transition-all
           flex justify-center items-center w-[70px] h-[70px]
           bg-[#145EFF] rounded-full border border-opacity-50
           border-[#113583] shadow-lg translate-x-5"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="36"
      height="36"
      viewBox="0 0 36 36"
      fill="none"
    >
      <path
        d="M22.5 28.125L12.375 18L22.5 7.875"
        stroke="#F2F6FF"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>

  <div id="carousel" class="overflow-hidden mx-[70px]">
    <div
      id="carousel-inner"
      class="flex transition-transform duration-300 ease-in-out gap-8"
    >
      {
        items.map((item) => (
          <a
            href={`/categorias/${item.nombre}`}
            class="carousel-item flex-shrink-0 w-[calc((100%-4rem)/5)]"
          >
            <Card imgSrc={item.imgSrc} headingText={item.nombre} />
          </a>
        ))
      }
    </div>
  </div>

  <button
    id="next-btn"
    class="carousel-next absolute z-10 right-0 top-1/2 -translate-y-1/2 hover:scale-110 hover:cursor-pointer transition-all
           flex justify-center items-center w-[70px] h-[70px]
           bg-[#145EFF] rounded-full border border-opacity-50
           border-[#113583] shadow-lg -translate-x-5"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="36"
      height="36"
      viewBox="0 0 36 36"
      fill="none"
    >
      <path
        d="M13.5 7.875L23.625 18L13.5 28.125"
        stroke="#F2F6FF"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>
</div>

<script type="module">
  class Carousel {
    constructor() {
      this.container = document.getElementById("carousel");
      this.inner = document.getElementById("carousel-inner");
      this.items = Array.from(document.querySelectorAll(".carousel-item"));
      this.prevBtn = document.getElementById("prev-btn");
      this.nextBtn = document.getElementById("next-btn");

      this.currentIndex = 0;
      this.itemWidth = 0;
      this.totalItems = this.items.length;
      this.itemsPerView = 5;

      this.initialize();
    }

    initialize() {
      // Clonar elementos para el efecto infinito
      const itemsToClone = 5;
      const firstClones = this.items
        .slice(0, itemsToClone)
        .map((item) => item.cloneNode(true));
      const lastClones = this.items
        .slice(-itemsToClone)
        .map((item) => item.cloneNode(true));

      // Agregar clones al inicio y final
      firstClones.forEach((clone) => this.inner.appendChild(clone));
      lastClones.forEach((clone) =>
        this.inner.insertBefore(clone, this.inner.firstChild)
      );

      // Calcular ancho del item y posición inicial
      this.updateDimensions();
      this.setPosition();

      // Event listeners
      this.prevBtn.addEventListener("click", () => this.move("prev"));
      this.nextBtn.addEventListener("click", () => this.move("next"));
      window.addEventListener("resize", () => this.updateDimensions());

      // Configurar transición
      this.inner.style.transition = "transform 0.3s ease-in-out";
    }

    updateDimensions() {
      const item = this.items[0];
      this.itemWidth =
        item.offsetWidth + parseInt(window.getComputedStyle(item).marginRight);
      this.setPosition();
    }

    setPosition(index = this.currentIndex) {
      const position = -(index + 5) * this.itemWidth;
      this.inner.style.transform = `translateX(${position}px)`;
    }

    move(direction) {
      const isNext = direction === "next";
      this.currentIndex += isNext ? 1 : -1;

      this.inner.style.transition = "transform 0.3s ease-in-out";
      this.setPosition();

      // Check for infinite scroll reset
      if (isNext && this.currentIndex >= this.totalItems) {
        this.resetPosition(0);
      } else if (!isNext && this.currentIndex < 0) {
        this.resetPosition(this.totalItems - 1);
      }
    }

    resetPosition(index) {
      setTimeout(() => {
        this.inner.style.transition = "none";
        this.currentIndex = index;
        this.setPosition();
        setTimeout(() => {
          this.inner.style.transition = "transform 0.3s ease-in-out";
        }, 50);
      }, 300);
    }
  }

  // Inicializar el carrusel cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", () => {
    new Carousel();
  });
</script>
