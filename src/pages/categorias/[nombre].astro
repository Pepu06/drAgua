---
import Layout from "@layouts/Layout.astro";
import { items } from "@lib/categories.js";
import CardItem from "@components/ui/CardItem.astro";
import { productos } from "@lib/products";
import { segmentos } from "@lib/segmentos";

export async function getStaticPaths() {
  return items.map((item) => ({
    params: { nombre: item.nombre },
  }));
}

const { nombre } = Astro.params;

const item = items.find((product) => product.nombre === nombre);

const filteredProductos = productos.filter((product) =>
  item.productos.includes(product.id)
);

const filteredSegmentos = filteredProductos.flatMap((product) =>
  segmentos.filter((segmento) => product.segmentos.includes(segmento.id))
);

const uniqueSegment = [
  ...new Set(filteredSegmentos.map((segmento) => segmento)),
];
---

<Layout title="Categorias">
  <style is:global>
    html {
      scroll-behavior: smooth;
    }
    * {
      scroll-behavior: smooth;
    }
  </style>
  <section
    class="bg-bgDrAgua flex justify-center items-center flex-col pt-40 gap-8 overflow-x-hidden"
    style="
border-bottom: 1px solid var(--Border-Color, #13254F);
"
  >
    <h2
      style="color: var(--Pale-Color, #F2F6FF);
font-size: 14px;
font-style: normal;
font-weight: 400;
line-height: normal;
letter-spacing: 2.8px;"
    >
      <span class="text-white/75">INICIO / CATEGORIAS</span> / {item.nombre}
    </h2>
    <h1
      style="color: #FFF;
font-size: 36px;
font-style: normal;
font-weight: 800;
line-height: normal;"
    >
      {item.nombre.charAt(0).toUpperCase() + item.nombre.slice(1).toLowerCase()}
    </h1>
    <div class="flex flex-wrap justify-center gap-5 m-5">
      {
        uniqueSegment.length > 0 &&
          uniqueSegment.map((segment) =>
            segment.marca ? (
              <a
                class="segment-button hover:scale-105 transition-all shadow-md"
                href={"#segmento-" + segment.nombre}
              >
                <img
                  src={segment.fotoUrl}
                  alt={segment.nombre}
                  class="h-10 object-cover rounded-md"
                />
              </a>
            ) : (
              <a
                class="bg-[#145EFF] text-white py-2 px-4 rounded flex justify-center items-center segment-button hover:scale-105 transition-all"
                href={`#${segment.id}`}
              >
                {segment.nombre}
              </a>
            )
          )
      }
    </div>
    <div
      class="w-screen"
      style="width: 100vw;
height: 1px;
flex-shrink: 0;
border-radius: 100px;
background: radial-gradient(50% 50% at 50% 50%, #13254F 0%, rgba(19, 37, 79, 0.00) 100%);"
    >
    </div>
    <div class="p-10">
      {
        uniqueSegment.length > 0 ? (
          <>
            {uniqueSegment.map((segment) => {
              const productosPorSegmento = filteredProductos.filter((product) =>
                product.segmentos.includes(segment.id)
              );

              if (productosPorSegmento.length > 0) {
                return (
                  <section id={segment.id} class="mb-10">
                    <h2
                      id={`segmento-${segment.nombre}`}
                      class="text-white font-semibold text-5xl text-center py-10"
                    >
                      {segment.nombre}
                    </h2>
                    <div
                      class={`grid ${productosPorSegmento.length < 3 ? "grid-cols-3 justify-center" : productosPorSegmento.length < 4 ? "grid-cols-3" : "grid-cols-4"} gap-4`}
                    >
                      {productosPorSegmento.map((product) => (
                        <CardItem
                          key={product.id}
                          imgSrc={product.fotoUrl}
                          nombre={product.nombre}
                          desc={product.descripcion}
                        />
                      ))}
                    </div>
                  </section>
                );
              }
              return null;
            })}
            {(() => {
              const productosSinSegmento = filteredProductos.filter(
                (product) =>
                  !product.segmentos || product.segmentos.length === 0
              );

              if (productosSinSegmento.length > 0) {
                const gridCols =
                  productosSinSegmento.length < 3
                    ? "grid-cols-3 justify-center"
                    : productosSinSegmento.length < 4
                      ? "grid-cols-3"
                      : "grid-cols-4";
                return (
                  <section class="mb-10">
                    <h2 class="text-light-blue font-semibold text-5xl text-center py-10">
                      Otros productos
                    </h2>
                    <div class={`grid ${gridCols} gap-4`}>
                      {productosSinSegmento.map((product) => (
                        <CardItem
                          key={product.id}
                          imgSrc={product.fotoUrl}
                          nombre={product.nombre}
                          desc={product.descripcion}
                        />
                      ))}
                    </div>
                  </section>
                );
              }
              return null;
            })()}
          </>
        ) : (
          <div
            class={`grid ${filteredProductos.length < 3 ? "grid-cols-3 justify-center" : filteredProductos.length < 4 ? "grid-cols-3" : "grid-cols-4"} gap-4`}
          >
            {filteredProductos.map((product) => (
              <CardItem
                key={product.id}
                imgSrc={product.fotoUrl}
                nombre={product.nombre}
                desc={product.descripcion}
              />
            ))}
          </div>
        )
      }
    </div>
  </section>
</Layout>
